<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 记录</title>
    <link>https://ffzznjxk.github.io/post/</link>
    <description>Recent content in Posts on 记录</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 08 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://ffzznjxk.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>选择集合与几何变换</title>
      <link>https://ffzznjxk.github.io/p/new-project-3/</link>
      <pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ffzznjxk.github.io/p/new-project-3/</guid>
      <description>选择集 选择集   获取选择
Editor.GetSelection()
  选择的内容
  SelectionSet = PromptSelectionResult.Value ObjectId[] = SelectionSet.GetObjectIds()
  类型DxfName
ObjectId.ObjectClass.DxfName
  /// &amp;lt;summary&amp;gt;  /// 按DxfName分类对象  /// &amp;lt;/summary&amp;gt; [CommandMethod(&amp;#34;SED&amp;#34;, CommandFlags.UsePickSet)] public void SelectEntityDxf() { Editor ed = AcadApp.DocumentManager.MdiActiveDocument.Editor; ////命令之前选中  //var psrAleady = ed.SelectImplied();  //选择集  var pso = new PromptSelectionOptions(); pso.MessageForAdding = &amp;#34;选择对象\n&amp;#34;; var psr = ed.GetSelection(pso); ////全部选中  //var psrA = ed.SelectAll();  //选择集  //PromptSelectionResult psrPolygon, psrCw, psrW;  ////选择多线段  //var per = ed.</description>
    </item>
    
    <item>
      <title>用户交互与几何图形</title>
      <link>https://ffzznjxk.github.io/p/new-project-2/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ffzznjxk.github.io/p/new-project-2/</guid>
      <description>输入输出 输入  获取点提示 PromptPointOptions() 获取点结果 ed.GetPoint() 状态 PromptStatus.OK  输出  输出信息 ed.WriteMessage()  /// &amp;lt;summary&amp;gt;  /// 提示选择点  /// &amp;lt;/summary&amp;gt; [CommandMethod(&amp;#34;PromptSelectPoint&amp;#34;)] public void PromptSelectPoint() { //当前文档  Document doc = AcadApp.DocumentManager.MdiActiveDocument; //获得编辑器  Editor ed = doc.Editor; //获取点提示  var ppo = new PromptPointOptions(&amp;#34;\n指定起点&amp;#34;); //获取点结果  var ppr = ed.GetPoint(ppo); //结果状态为OK  if (ppr.Status == PromptStatus.OK) { //起点  Point3d startPt = ppr.Value; ppo = new PromptPointOptions(&amp;#34;\n指定终点&amp;#34;); ppr = ed.</description>
    </item>
    
    <item>
      <title>2020年记忆</title>
      <link>https://ffzznjxk.github.io/p/2020summary/</link>
      <pubDate>Fri, 15 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ffzznjxk.github.io/p/2020summary/</guid>
      <description>变化  逆风——花园精灵
 图1.gif
图2.gif
图3.gif
图4.gif
图5.gif
  飞机云——《起风了》
 动态的可能
 设计师的第二插件</description>
    </item>
    
    <item>
      <title>一个新项目</title>
      <link>https://ffzznjxk.github.io/p/new-project/</link>
      <pubDate>Sat, 09 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ffzznjxk.github.io/p/new-project/</guid>
      <description>一个新项目 Visual Studio 1. 安装  登陆 语言  2. 创建新项目  解决方案 项目 项  3. HelloWorld  using namespace class  4. 工具  代码片段  5. 调试  断点 条件 监视（自动窗口/局部变量）  AutoCAD 1. 注册 2. 命令  line/point/vector/circle copy/move/scale/mirror block/dim/text  ObjectARX 1. 类库(.Net Framework)  4.5.2 AcDbMgd AcMgd  2. HelloWord  Editor Application  3. 调试  设为启动项 启动外部程序 NetLoad  4. Line  F12   /// &amp;lt;summary&amp;gt;  /// 新建直线(newline)  /// &amp;lt;/summary&amp;gt; [CommandMethod(&amp;#34;newline&amp;#34;)] public void NewLine() { //定义直线，起点：100, 100, 0；终点：300, 200, 0  Line line = new Line(new Point3d(100, 100, 0), new Point3d(300, 200, 0)); //打开当前图形数据库  Database db = HostApplicationServices.</description>
    </item>
    
    <item>
      <title>几何算法问题1</title>
      <link>https://ffzznjxk.github.io/p/geomath-problem1/</link>
      <pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ffzznjxk.github.io/p/geomath-problem1/</guid>
      <description>向量投影问题  在一个二维坐标系中一条线段Line_ab，起终点分别为A(100,100)，B(300,200)，一条线段Line_cd，起终点分别为C(100,200)，D(150,225)。 已知条件 计算Line_cd投影到Line_ab上的线段 ( 如下图所示Line_ef )。 计算投影线段</description>
    </item>
    
    <item>
      <title>图形计算</title>
      <link>https://ffzznjxk.github.io/p/mathcode-data/</link>
      <pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ffzznjxk.github.io/p/mathcode-data/</guid>
      <description>概况 图形计算编程主要分两部分内容 1. 算法  几何计算 数据运算  2. 编程  C# 方法 AutoCAD 接口  对于平面设计（建筑行业）主要对象是二维图形，用到的几何计算主要与点、线、框的计算方法；数据运算主要是按照功能需求，对已有的数据准确有效处理。 因为平面设计主要使用 AutoCAD 软件开发，而 AutoCAD 支持 .net 开发，其中 C# 语言易于上手，相关功能资料齐全，易于软件开发使用。
学习资料 1. 几何计算  《几何计算》 何援军 著，该书讲解二维、三维图形基础计算方法，并用 C++ 给出代码示例，是一本很好的几何计算入门书籍。该书没有电子版，可在京东购买。  2. C#  《C#图解教程》（第4版） 该书介绍了 C# 语言特性，用一些图示方法展示基本原理，适合打好编程语言基础。 《C#本质论》（第4版） 适合扩展提高。 C#入门到精通 这是一套比较全面的视频资料，不过需要很多时间浏览，适合看书遇到疑问时找视频相关内容了解。 C# 菜鸟教程 简明的语言教程网站，适合临时找内容。 C# 官方文档 最全最专业的官方文档，适合深入研究。  3. 算法  《算法》（第4版） 一本专业的算法书籍，让计算简单而有效。 算法第四版 - Course课程 这是上面这本书的视频教程。 Leetcode 题解 Leetcode 是一个专门是算法解题网站，这是一个挑选了常用算法的网站，可以学习这些算法用于解决可能的问题。  4. AutoCAD 二次开发  《Auto CAD VBA&amp;amp;VB.</description>
    </item>
    
    <item>
      <title>算法学习2021-01-04</title>
      <link>https://ffzznjxk.github.io/p/leetcode-2021-01-04/</link>
      <pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ffzznjxk.github.io/p/leetcode-2021-01-04/</guid>
      <description>分配饼干 Input: grid[1,3], size[1,2,4]Output: 2public class Solution { public int FindContentChildren(int[] g, int[] s) { Array.Sort(s); Array.Sort(g); int child = 0, cookie = 0; while(child &amp;lt; g.Length &amp;amp;&amp;amp; cookie &amp;lt; s.Length) { if(g[child] &amp;lt;= s[cookie]) child++; cookie++; } return child; } } 不重叠的区间个数 Input: [ [1,2], [1,2], [1,2] ]Output: 2Input: [ [1,2], [2,3] ]Output: 0</description>
    </item>
    
    <item>
      <title>算法学习2020-12-30</title>
      <link>https://ffzznjxk.github.io/p/leetcode-2020-12-30/</link>
      <pubDate>Wed, 30 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ffzznjxk.github.io/p/leetcode-2020-12-30/</guid>
      <description>按颜色进行排序 Input: [2,0,2,1,1,0]Output: [0,0,1,1,2,2]public class Solution { public void SortColors(int[] nums) { int z = 0, t = nums.Length - 1; for (int i = 0; i &amp;lt; nums.Length; i++) { if (nums[i] == 0) { int tmp = nums[z]; nums[z++] = nums[i]; nums[i] = tmp; } } for (int i = nums.Length - 1; i &amp;gt;= z; i--) { if (nums[i] == 2) { int tmp = nums[t]; nums[t--] = nums[i]; nums[i] = tmp; } } } } </description>
    </item>
    
    <item>
      <title>算法学习2020-12-29</title>
      <link>https://ffzznjxk.github.io/p/leetcode-2020-12-29/</link>
      <pubDate>Tue, 29 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ffzznjxk.github.io/p/leetcode-2020-12-29/</guid>
      <description>按照字符出现次数对字符串排序 Input:&amp;quot;tree&amp;quot;Output:&amp;quot;eert&amp;quot;Explanation:&#39;e&#39; appears twice while &#39;r&#39; and &#39;t&#39; both appear once.So &#39;e&#39; must appear before both &#39;r&#39; and &#39;t&#39;. Therefore &amp;quot;eetr&amp;quot; is also a valid answer.public class Solution { public string FrequencySort(string s) { var list = s.ToCharArray().GroupBy(d =&amp;gt; d) .ToDictionary(d =&amp;gt; d.Key, d =&amp;gt; d.Count()).ToList(); list.Sort((p1, p2) =&amp;gt; p2.Value.CompareTo(p1.Value)); StringBuilder result = new StringBuilder(); foreach (var l in list) for (int i = 0; i &amp;lt; l.</description>
    </item>
    
    <item>
      <title>CADRibbon</title>
      <link>https://ffzznjxk.github.io/p/autocad-ribbon/</link>
      <pubDate>Tue, 22 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ffzznjxk.github.io/p/autocad-ribbon/</guid>
      <description></description>
    </item>
    
    <item>
      <title>CAD资料</title>
      <link>https://ffzznjxk.github.io/p/autocad-data/</link>
      <pubDate>Tue, 22 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ffzznjxk.github.io/p/autocad-data/</guid>
      <description>&lt;h1 id=&#34;cad-开发学习资料集合&#34;&gt;CAD 开发学习资料集合&lt;/h1&gt;</description>
    </item>
    
    <item>
      <title>算法学习2020-12-22</title>
      <link>https://ffzznjxk.github.io/p/leetcode-2020-12-22/</link>
      <pubDate>Tue, 22 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ffzznjxk.github.io/p/leetcode-2020-12-22/</guid>
      <description>找到倒数第 k 个的元素 Given [1,1,1,2,2,3] and k = 2, return [1,2].public class Solution { public int FindKthLargest(int[] nums, int k) { return nums.OrderByDescending(d =&amp;gt; d).ToArray()[k - 1]; } } 出现频率最多的 k 个元素 Given [1,1,1,2,2,3] and k = 2, return [1,2].public class Solution { public int[] TopKFrequent(int[] nums, int k) { return nums.GroupBy(d =&amp;gt; d) .OrderByDescending(d =&amp;gt; d.Count()) s.Select(d =&amp;gt; d.Key).Take(k).ToArray(); } } </description>
    </item>
    
    <item>
      <title>算法学习2020-12-21</title>
      <link>https://ffzznjxk.github.io/p/leetcode-2020-12-21/</link>
      <pubDate>Mon, 21 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ffzznjxk.github.io/p/leetcode-2020-12-21/</guid>
      <description>&lt;h2 id=&#34;双指针&#34;&gt;双指针&lt;/h2&gt;</description>
    </item>
    
    <item>
      <title>算法学习2020-12-19</title>
      <link>https://ffzznjxk.github.io/p/leetcode-2020-12-19/</link>
      <pubDate>Sat, 19 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ffzznjxk.github.io/p/leetcode-2020-12-19/</guid>
      <description>回文字符串 Input: &amp;quot;abca&amp;quot;Output: TrueExplanation: You could delete the character &#39;c&#39;.可以删除一个字符，判断是否能构成回文字符串。
public class Solution { public bool ValidPalindrome(string s) { for (int i = 0, j = s.Length - 1; i &amp;lt; j; i++, j--) if (s[i] != s[j]) return IsPalindrome(s, i + 1, j) || IsPalindrome(s, i, j - 1); return true; } private static bool IsPalindrome(string s, int i, int j) { while (i &amp;lt; j) if (s[i++] !</description>
    </item>
    
    <item>
      <title>算法学习2020-12-18</title>
      <link>https://ffzznjxk.github.io/p/leetcode-2020-12-18/</link>
      <pubDate>Fri, 18 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ffzznjxk.github.io/p/leetcode-2020-12-18/</guid>
      <description>&lt;h2 id=&#34;双指针&#34;&gt;双指针&lt;/h2&gt;</description>
    </item>
    
    <item>
      <title>第一篇博客</title>
      <link>https://ffzznjxk.github.io/p/first-blog/</link>
      <pubDate>Thu, 17 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ffzznjxk.github.io/p/first-blog/</guid>
      <description>这是第一篇博客,记录一下.</description>
    </item>
    
  </channel>
</rss>
