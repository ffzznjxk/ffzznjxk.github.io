<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on 记录</title>
    <link>https://ffzznjxk.github.io/categories/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on 记录</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 04 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://ffzznjxk.github.io/categories/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>算法学习2021-01-04</title>
      <link>https://ffzznjxk.github.io/p/leetcode-2021-01-04/</link>
      <pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ffzznjxk.github.io/p/leetcode-2021-01-04/</guid>
      <description>分配饼干 Input: grid[1,3], size[1,2,4]Output: 2public class Solution { public int FindContentChildren(int[] g, int[] s) { Array.Sort(s); Array.Sort(g); int child = 0, cookie = 0; while(child &amp;lt; g.Length &amp;amp;&amp;amp; cookie &amp;lt; s.Length) { if(g[child] &amp;lt;= s[cookie]) child++; cookie++; } return child; } } 不重叠的区间个数 Input: [ [1,2], [1,2], [1,2] ]Output: 2Input: [ [1,2], [2,3] ]Output: 0</description>
    </item>
    
    <item>
      <title>算法学习2020-12-30</title>
      <link>https://ffzznjxk.github.io/p/leetcode-2020-12-30/</link>
      <pubDate>Wed, 30 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ffzznjxk.github.io/p/leetcode-2020-12-30/</guid>
      <description>按颜色进行排序 Input: [2,0,2,1,1,0]Output: [0,0,1,1,2,2]public class Solution { public void SortColors(int[] nums) { int z = 0, t = nums.Length - 1; for (int i = 0; i &amp;lt; nums.Length; i++) { if (nums[i] == 0) { int tmp = nums[z]; nums[z++] = nums[i]; nums[i] = tmp; } } for (int i = nums.Length - 1; i &amp;gt;= z; i--) { if (nums[i] == 2) { int tmp = nums[t]; nums[t--] = nums[i]; nums[i] = tmp; } } } } </description>
    </item>
    
    <item>
      <title>算法学习2020-12-29</title>
      <link>https://ffzznjxk.github.io/p/leetcode-2020-12-29/</link>
      <pubDate>Tue, 29 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ffzznjxk.github.io/p/leetcode-2020-12-29/</guid>
      <description>按照字符出现次数对字符串排序 Input:&amp;quot;tree&amp;quot;Output:&amp;quot;eert&amp;quot;Explanation:&#39;e&#39; appears twice while &#39;r&#39; and &#39;t&#39; both appear once.So &#39;e&#39; must appear before both &#39;r&#39; and &#39;t&#39;. Therefore &amp;quot;eetr&amp;quot; is also a valid answer.public class Solution { public string FrequencySort(string s) { var list = s.ToCharArray().GroupBy(d =&amp;gt; d) .ToDictionary(d =&amp;gt; d.Key, d =&amp;gt; d.Count()).ToList(); list.Sort((p1, p2) =&amp;gt; p2.Value.CompareTo(p1.Value)); StringBuilder result = new StringBuilder(); foreach (var l in list) for (int i = 0; i &amp;lt; l.</description>
    </item>
    
    <item>
      <title>算法学习2020-12-22</title>
      <link>https://ffzznjxk.github.io/p/leetcode-2020-12-22/</link>
      <pubDate>Tue, 22 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ffzznjxk.github.io/p/leetcode-2020-12-22/</guid>
      <description>找到倒数第 k 个的元素 Given [1,1,1,2,2,3] and k = 2, return [1,2].public class Solution { public int FindKthLargest(int[] nums, int k) { return nums.OrderByDescending(d =&amp;gt; d).ToArray()[k - 1]; } } 出现频率最多的 k 个元素 Given [1,1,1,2,2,3] and k = 2, return [1,2].public class Solution { public int[] TopKFrequent(int[] nums, int k) { return nums.GroupBy(d =&amp;gt; d) .OrderByDescending(d =&amp;gt; d.Count()) s.Select(d =&amp;gt; d.Key).Take(k).ToArray(); } } </description>
    </item>
    
    <item>
      <title>算法学习2020-12-21</title>
      <link>https://ffzznjxk.github.io/p/leetcode-2020-12-21/</link>
      <pubDate>Mon, 21 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ffzznjxk.github.io/p/leetcode-2020-12-21/</guid>
      <description>&lt;h2 id=&#34;双指针&#34;&gt;双指针&lt;/h2&gt;</description>
    </item>
    
    <item>
      <title>算法学习2020-12-19</title>
      <link>https://ffzznjxk.github.io/p/leetcode-2020-12-19/</link>
      <pubDate>Sat, 19 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ffzznjxk.github.io/p/leetcode-2020-12-19/</guid>
      <description>回文字符串 Input: &amp;quot;abca&amp;quot;Output: TrueExplanation: You could delete the character &#39;c&#39;.可以删除一个字符，判断是否能构成回文字符串。
public class Solution { public bool ValidPalindrome(string s) { for (int i = 0, j = s.Length - 1; i &amp;lt; j; i++, j--) if (s[i] != s[j]) return IsPalindrome(s, i + 1, j) || IsPalindrome(s, i, j - 1); return true; } private static bool IsPalindrome(string s, int i, int j) { while (i &amp;lt; j) if (s[i++] !</description>
    </item>
    
    <item>
      <title>算法学习2020-12-18</title>
      <link>https://ffzznjxk.github.io/p/leetcode-2020-12-18/</link>
      <pubDate>Fri, 18 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ffzznjxk.github.io/p/leetcode-2020-12-18/</guid>
      <description>&lt;h2 id=&#34;双指针&#34;&gt;双指针&lt;/h2&gt;</description>
    </item>
    
  </channel>
</rss>
